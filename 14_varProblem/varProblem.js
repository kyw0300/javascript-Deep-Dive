// 지역 변수의 생명 주기는 함수의 생명 주기와 일치한다.

// 변수는 자신이 등록된 스코프가 소멸(메모리 해제)될 때까지 유효하다.
// 할당된 메모리 공간은 더 이상 그 누구도 참조하지 않을 때 가비지 콜렉터에 의해 해제되어 가용 메모리 풀에 반환된다.
// 즉, 누군가가 메모리 공간을 참조하고 있으면 해제되지 않고 확보된 생태로 남아있게 된다.
// 스코프도 마찬가지, 누군가 스코프를 참조하고 있으면 스코프는 소멸하지 않고 생존하게 된다.

var x = 'global';

function foo() {
    console.log(x); // undefined
    var x = 'local';
}

foo();
console.log(x); // global


// 전역 객체(global object) : 코드가 실행되기 이전 단계에 자바스크립트 엔진에 의해 어떤 객체보다도 먼저 생성되는 특수한 객체.
// globalThis 식별자로 통일됨. 
// 전역 객체는 표준 빌트인 객체(Object, String, Number, Function, Array...)와 환경에 따른 호스트 객체(클라이언트 웹 API or Node.js의 호스트 API)
// 그리고 var 키워드로 선언한 전역 변수와 전역 함수를 프로퍼티로 갖는다.
// var 키워드로 선언한 전역 변수의 생명 주기는 전역 객체의 생명 주기와 일치한다.


// 전역 변수의 문제점 : 암묵적 결합(implicit coupling) 허용, 긴 생명 주기, 스코프 체인 상에서 종점에 존재(검색 속도가 가장 느리다), 네임스페이스 오염

// 즉시 실행 함수 : 함수 정의와 동시에 호출되는 즉시 실행 함수는 단 한 번만 호출됨. 
// 모든 코드를 즉시 실행 함수도 감싸면 모든 변수는 즉시 실행 함수의 지역 변수가 된다. 전역 변수를 생성하지 않으므로 라이브러리 등에 자주 사용.

// 네임스페이스 객체 : 전역에 네임스페리스 역할을 담당할 객체를 생성하고 전역변수처럼 사용하고 싶은 변수를 프로퍼티로 추가. 그닥.. 별로..

// 모듈 패턴(module pattern) : 클래스를 모방해서 관련이 있는 변수와 함수를 모아 즉시 실행 함수로 감싸 하나의 모듈을 만든다.
// 자바스크립트의 강력한 기능인 클로저를 기반으로 동작함. 전역 변수의 억제는 물론 캡슐화까지 구현할 수 있다!
// 캡슐화(encapsulation) : 객체의 상태(state)를 나타내는 프로퍼티와 프로퍼티를 참조하고 조작할 수 있는 동작인 메서드를 하나로 묶는 것
// 정보 은닉(information hiding) : 객체의 특정 프로퍼티나 메서드를 감출 목적으로 사용
var Counter = (function () {
    // private 변수
    var num = 0;

    // 외부로 공개할 데이터나 메서드를 프로퍼티로 추가한 객체를 반환한다.
    return {
        increase() {
            return ++num;
        },
        decrease() {
            return --num;
        }
    };
}());

// private 변수는 외부로 노출되지 않는다.
console.log(Counter.num); // undefined

console.log(Counter.increase()); // 1
console.log(Counter.increase()); // 2
console.log(Counter.decrease()); // 1
console.log(Counter.decrease()); // 0

// 외부에 노출하고 싶은 변수나 함수를 담아 반환함. 이때 반환되는 개겣의 프로퍼티는 외부에 노출되는 퍼블릭 멤버(public member)임.
// 외부로 노출하고 싶지 않은 변수나 함수는 반환하는 객체에 추가하지 않으면 외부에서 접근할 수 없는 프라이빗 멤버(private member)가 된다.

// script 태그에 type="module" 어트리뷰트 추가 시 해당 하바스크립트 파일은 모듈로서 동작한다. 모듈의 파일 확장자는 mjs를 권장
