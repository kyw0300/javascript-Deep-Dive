// 프로그래밍 언어의 함수는 일련의 과정을 문(statement)으로 구현하고 
// 코드 블록으로 감싸서 하나의 실행 단위로 정의한 것
// => 코드의 재사용 가능, 유지보수 편의성을 높이고 코드의 신뢰성을 높여준다.

// 리터럴은 값을 생성하기 위한 표기법이다. 따라서 함수 리터럴도 평가되어 값을 생성하며,
// 이 값은 객체다. 즉, 함수는 객체다. 일반 객체는 호출할 수 없지만 함수는 호출할 수 있다.
// 또한 일반 객체에는 없는 함수 객체만의 고유한 프로퍼티를 갖는다.

// 함수 선언문
function add(x, y) {
    return x + y;
}

// 함수 참조
// console.dir은 console.log와는 달리 함수 객체의 프로퍼티까지 출력한다.
// 단, Node.js 환경에서는 console.log와 같은 결과가 출력된다.
console.dir(add); // ƒ add(x, y)

// 함수 호출
console.log(add(2, 5)); // 7


// 함수 선언문은 표현식이 아닌 문이므로 변수에 할당할 수 없다.
// 하지만 함수 선언문이 변수에 할당되는 것처럼 보인다.
var add = function add(x, y) {
    return x + y;
};

// 함수 호출
console.log(add(2, 5)); // 7


// 기명 함수 리터럴을 단독으로 사용하면 함수 선언문으로 해석된다.
// 함수 선언문에서는 함수 이름을 생략할 수 없다.
function foo() { console.log('foo'); }
foo(); // foo

// 함수 리터럴을 피연산자로 사용하면 함수 선언문이 아니라 함수 리터럴 표현식으로 해석된다.
// 함수 리터럴에서는 함수 이름을 생략할 수 있다.
(function bar() { console.log('bar'); });
bar(); // ReferenceError: bar is not defined


// javascript 엔진은 생성된 함수를 호출하기 위해 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고
// 거기에 함수 객체를 할당한다.
// 함수는 함수 이름으로 호출하는 것이 아니라 함수 객체를 가리키는 식별자로 호출한다.

var add = function add(x, y) {
    return x + y;
};

console.log(add(2, 5)); // 7
// 결론적으로 javascript 엔진은 함수 선언문을 함수 표현식으로 변환해 함수 객체를 생성한다고 볼 수 있다.
// but 선언문과 표현문이 완전 정확히 동일하게 동작하는 것은 아님


// 함수 표현식
// javascript의 함수는 객체 타입의 값이다. 이처럼 값의 성질을 갖는 객체를 일급 객체라 함.
// javascript의 함수는 일급 객체임 => 함수를 값처럼 자유롭게 사용할 수 있다!

// 기명 함수 표현식
var add = function foo(x, y) {
    return x + y;
};

// 함수 객체를 가리키는 식별자로 호출
console.log(add(2, 5)); // 7

// 함수 이름으로 호출하면 ReferenceError가 발생한다.
// 함수 이름은 함수 몸체 내부에서만 유효한 식별자다.
console.log(foo(2, 5)); // ReferenceError: foo is not defined


// 함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있다. 그러나 함수 표현식으로 정의한 함수는 함수 표현식 이전에 호출할 수 없다.
// 함수 선언문으로 정의한 함수와 함수 표현식으로 정의한 함수의 생성 시점이 다르기 때문!
// 함수 선언문으로 함수를 정의하면 런타임 이전에 함수 객체가 먼저 생성됨
// 함수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 함수 호이스팅(function hoisting)이라 한다.
// 함수 호이스팅과 변수 호이스팅은 미묘한 차이가 있음.

// 변수 할당문의 값은 할당문이 실행되는 시점, 즉 런타임에 평가되므로 함수 표현식의 함수 리터럴도 할당문이 실행되는 시점에 평가되어 함수 객체가 된다.
// 따라서 함수 표현식으로 함수를 정의하면 함수 호이스팅이 발생하는 것이 아니라 변수 호이스팅이 발생한다.

// 함수 참조
console.dir(add); // ƒ add(x, y)
console.dir(sub); // undefined

// 함수 호출
console.log(add(2, 5)); // 7
console.log(sub(2, 5)); // TypeError: sub is not a function

// 함수 선언문
function add(x, y) {
    return x + y;
}

// 함수 표현식
var sub = function (x, y) {
    return x - y;
};

// 함수 호이스팅은 함수를 호출하기 전에 반드시 함수를 선언해야 한다는 당연한 규칙을 무시함.
// 함수 선언문 대신 함수 표현식을 사용할 것을 권장!!!


// Function 생성자 함수 : 클로저(closure)를 생성하지 않음. 함수 선언문이나 함수 표현식으로 생성한 함수와 다르게 동작함.

// 화살표 함수 : 기존의 함수보다 표현만 간략한 것이 아니라 내부 동작 또한 간략화되어 있음.
// 화살표 함수는 생성자 함수로 사용할 수 없으며, 기존 함수와 this 바인딩 방식이 다르고, prototype 프로퍼티가 없으며 arguments 객체를 생성하지 않는다.


// 함수 호출 시, 매개변수보다 인수가 더 많은 경우 초과된 인수는 무시된다.
// 사실, 초과된 인수가 그냥 버려지는 것은 아니다. 모든 인수는 암묵적으로 arguments 객체의 프로퍼티로 보관된다.
function add(x, y) {
    console.log(arguments);
    // Arguments(3) [2, 5, 10, callee: ƒ, Symbol(Symbol.iterator): ƒ]

    return x + y;
}

add(2, 5, 10);


// 함수의 매개변수는 코드를 이해하는 데 방해되는 요소이므로 이상적인 매개변수 개수는 0개이며 적을수록 좋다.
// 매개변수의 개수가 많다는 것은 함수가 여러 가지 일을 한다는 증거이므로 바람직하지 않다.
// 이상적인 함수는 한 가지 일만 해야 하며, 가급적 작게 만들어야 한다.
// 매개변수는 최대 3개 이상을 넘지 않는 것을 권장. 만약 그 이상의 매개변수가 필요하다면 하나의 매개변수를 선언하고 객체를 인수로 전달하는 것이 유리하다.
// 이 경우 함수 내부에서 객체를 변경하면 함수 외부의 객체가 변경되는 부수 효과(side effect)가 발생할 수 있음에 주의!!!

// 반환문 : return 키워드를 사용해 자바스크립트에서 사용 가능한 모든 값을 반환할 수 있다.
// 함수 호출은 표현식이다. 함수 호출 표현식은 return 키워드가 반환한 표현식의 평가 결과, 즉 반환값으로 평가된다.
// 1. 반환문은 함수의 실행을 중단하고 함수 몸체를 빠져나간다.
// 2. 반환문은 return 키워드 뒤에 오는 표현식을 평가해 반환한다. return 키워드 뒤에 반환값으로 사용할 표현식을 명시적으로 지정하지 않으면 undefined가 반환된다.
